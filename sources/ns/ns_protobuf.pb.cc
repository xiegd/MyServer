// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sylar/ns/ns_protobuf.proto

#include "sylar/ns/ns_protobuf.pb.h"

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>

#include <algorithm>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sylar_2fns_2fns_5fprotobuf_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
        scc_info_Node_sylar_2fns_2fns_5fprotobuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sylar_2fns_2fns_5fprotobuf_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
        scc_info_NodeInfo_sylar_2fns_2fns_5fprotobuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sylar_2fns_2fns_5fprotobuf_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
        scc_info_RegisterInfo_sylar_2fns_2fns_5fprotobuf_2eproto;
namespace sylar {
namespace ns {
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class RegisterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterInfo>
      _instance;
} _RegisterInfo_default_instance_;
class RegisterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterRequest>
      _instance;
} _RegisterRequest_default_instance_;
class QueryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryRequest>
      _instance;
} _QueryRequest_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo> _instance;
} _NodeInfo_default_instance_;
class QueryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryResponse>
      _instance;
} _QueryResponse_default_instance_;
class NotifyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotifyMessage>
      _instance;
} _NotifyMessage_default_instance_;
}  // namespace ns
}  // namespace sylar
static void InitDefaultsscc_info_Node_sylar_2fns_2fns_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sylar::ns::_Node_default_instance_;
    new (ptr)::sylar::ns::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sylar::ns::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_Node_sylar_2fns_2fns_5fprotobuf_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0, InitDefaultsscc_info_Node_sylar_2fns_2fns_5fprotobuf_2eproto},
        {}};

static void InitDefaultsscc_info_NodeInfo_sylar_2fns_2fns_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sylar::ns::_NodeInfo_default_instance_;
    new (ptr)::sylar::ns::NodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sylar::ns::NodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_NodeInfo_sylar_2fns_2fns_5fprotobuf_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_NodeInfo_sylar_2fns_2fns_5fprotobuf_2eproto},
        {
            &scc_info_Node_sylar_2fns_2fns_5fprotobuf_2eproto.base,
        }};

static void
InitDefaultsscc_info_NotifyMessage_sylar_2fns_2fns_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sylar::ns::_NotifyMessage_default_instance_;
    new (ptr)::sylar::ns::NotifyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sylar::ns::NotifyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_NotifyMessage_sylar_2fns_2fns_5fprotobuf_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_NotifyMessage_sylar_2fns_2fns_5fprotobuf_2eproto},
        {
            &scc_info_NodeInfo_sylar_2fns_2fns_5fprotobuf_2eproto.base,
        }};

static void
InitDefaultsscc_info_QueryRequest_sylar_2fns_2fns_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sylar::ns::_QueryRequest_default_instance_;
    new (ptr)::sylar::ns::QueryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sylar::ns::QueryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_QueryRequest_sylar_2fns_2fns_5fprotobuf_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_QueryRequest_sylar_2fns_2fns_5fprotobuf_2eproto},
        {}};

static void
InitDefaultsscc_info_QueryResponse_sylar_2fns_2fns_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sylar::ns::_QueryResponse_default_instance_;
    new (ptr)::sylar::ns::QueryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sylar::ns::QueryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_QueryResponse_sylar_2fns_2fns_5fprotobuf_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_QueryResponse_sylar_2fns_2fns_5fprotobuf_2eproto},
        {
            &scc_info_NodeInfo_sylar_2fns_2fns_5fprotobuf_2eproto.base,
        }};

static void
InitDefaultsscc_info_RegisterInfo_sylar_2fns_2fns_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sylar::ns::_RegisterInfo_default_instance_;
    new (ptr)::sylar::ns::RegisterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sylar::ns::RegisterInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_RegisterInfo_sylar_2fns_2fns_5fprotobuf_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_RegisterInfo_sylar_2fns_2fns_5fprotobuf_2eproto},
        {
            &scc_info_Node_sylar_2fns_2fns_5fprotobuf_2eproto.base,
        }};

static void
InitDefaultsscc_info_RegisterRequest_sylar_2fns_2fns_5fprotobuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sylar::ns::_RegisterRequest_default_instance_;
    new (ptr)::sylar::ns::RegisterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sylar::ns::RegisterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_RegisterRequest_sylar_2fns_2fns_5fprotobuf_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0,
         InitDefaultsscc_info_RegisterRequest_sylar_2fns_2fns_5fprotobuf_2eproto},
        {
            &scc_info_RegisterInfo_sylar_2fns_2fns_5fprotobuf_2eproto.base,
        }};

static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_sylar_2fns_2fns_5fprotobuf_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const**
    file_level_enum_descriptors_sylar_2fns_2fns_5fprotobuf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const**
    file_level_service_descriptors_sylar_2fns_2fns_5fprotobuf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto::offsets
        [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
            PROTOBUF_FIELD_OFFSET(::sylar::ns::Node, _has_bits_),
            PROTOBUF_FIELD_OFFSET(::sylar::ns::Node, _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::sylar::ns::Node, ip_),
            PROTOBUF_FIELD_OFFSET(::sylar::ns::Node, port_),
            PROTOBUF_FIELD_OFFSET(::sylar::ns::Node, weight_),
            0,
            1,
            2,
            PROTOBUF_FIELD_OFFSET(::sylar::ns::RegisterInfo, _has_bits_),
            PROTOBUF_FIELD_OFFSET(::sylar::ns::RegisterInfo,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::sylar::ns::RegisterInfo, domain_),
            PROTOBUF_FIELD_OFFSET(::sylar::ns::RegisterInfo, cmds_),
            PROTOBUF_FIELD_OFFSET(::sylar::ns::RegisterInfo, node_),
            0,
            ~0u,
            1,
            ~0u,  // no _has_bits_
            PROTOBUF_FIELD_OFFSET(::sylar::ns::RegisterRequest,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::sylar::ns::RegisterRequest, infos_),
            ~0u,  // no _has_bits_
            PROTOBUF_FIELD_OFFSET(::sylar::ns::QueryRequest,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::sylar::ns::QueryRequest, domains_),
            PROTOBUF_FIELD_OFFSET(::sylar::ns::NodeInfo, _has_bits_),
            PROTOBUF_FIELD_OFFSET(::sylar::ns::NodeInfo, _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::sylar::ns::NodeInfo, domain_),
            PROTOBUF_FIELD_OFFSET(::sylar::ns::NodeInfo, cmd_),
            PROTOBUF_FIELD_OFFSET(::sylar::ns::NodeInfo, nodes_),
            0,
            1,
            ~0u,
            ~0u,  // no _has_bits_
            PROTOBUF_FIELD_OFFSET(::sylar::ns::QueryResponse,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::sylar::ns::QueryResponse, infos_),
            ~0u,  // no _has_bits_
            PROTOBUF_FIELD_OFFSET(::sylar::ns::NotifyMessage,
                                  _internal_metadata_),
            ~0u,  // no _extensions_
            ~0u,  // no _oneof_case_
            ~0u,  // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::sylar::ns::NotifyMessage, dels_),
            PROTOBUF_FIELD_OFFSET(::sylar::ns::NotifyMessage, updates_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 8, sizeof(::sylar::ns::Node)},
        {11, 19, sizeof(::sylar::ns::RegisterInfo)},
        {22, -1, sizeof(::sylar::ns::RegisterRequest)},
        {28, -1, sizeof(::sylar::ns::QueryRequest)},
        {34, 42, sizeof(::sylar::ns::NodeInfo)},
        {45, -1, sizeof(::sylar::ns::QueryResponse)},
        {51, -1, sizeof(::sylar::ns::NotifyMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const* const file_default_instances[] =
    {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::sylar::ns::_Node_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::sylar::ns::_RegisterInfo_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::sylar::ns::_RegisterRequest_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::sylar::ns::_QueryRequest_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::sylar::ns::_NodeInfo_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::sylar::ns::_QueryResponse_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(
            &::sylar::ns::_NotifyMessage_default_instance_),
};

const char descriptor_table_protodef_sylar_2fns_2fns_5fprotobuf_2eproto
    [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\032sylar/ns/ns_protobuf.proto\022\010sylar.ns\"0"
        "\n\004Node\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 "
        "\001(\r\022\016\n\006weig"
        "ht\030\003 \001(\r\"J\n\014RegisterInfo\022\016\n\006domain\030\001 "
        "\001(\t"
        "\022\014\n\004cmds\030\002 \003(\r\022\034\n\004node\030\003 "
        "\001(\0132\016.sylar.ns."
        "Node\"8\n\017RegisterRequest\022%\n\005infos\030\001 \003(\0132\026"
        ".sylar.ns.RegisterInfo\"\037\n\014QueryRequest\022\017"
        "\n\007domains\030\001 "
        "\003(\t\"F\n\010NodeInfo\022\016\n\006domain\030\001 "
        "\001(\t\022\013\n\003cmd\030\002 \001(\r\022\035\n\005nodes\030\003 "
        "\003(\0132\016.sylar."
        "ns.Node\"2\n\rQueryResponse\022!\n\005infos\030\001 \003(\0132"
        "\022.sylar.ns.NodeInfo\"V\n\rNotifyMessage\022 \n\004"
        "dels\030\001 \003(\0132\022.sylar.ns.NodeInfo\022#\n\007update"
        "s\030\002 \003(\0132\022.sylar.ns.NodeInfo";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* const
    descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase* const
    descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto_sccs[7] = {
        &scc_info_Node_sylar_2fns_2fns_5fprotobuf_2eproto.base,
        &scc_info_NodeInfo_sylar_2fns_2fns_5fprotobuf_2eproto.base,
        &scc_info_NotifyMessage_sylar_2fns_2fns_5fprotobuf_2eproto.base,
        &scc_info_QueryRequest_sylar_2fns_2fns_5fprotobuf_2eproto.base,
        &scc_info_QueryResponse_sylar_2fns_2fns_5fprotobuf_2eproto.base,
        &scc_info_RegisterInfo_sylar_2fns_2fns_5fprotobuf_2eproto.base,
        &scc_info_RegisterRequest_sylar_2fns_2fns_5fprotobuf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto = {
        false,
        false,
        descriptor_table_protodef_sylar_2fns_2fns_5fprotobuf_2eproto,
        "sylar/ns/ns_protobuf.proto",
        467,
        &descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto_once,
        descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto_sccs,
        descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto_deps,
        7,
        0,
        schemas,
        file_default_instances,
        TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto::offsets,
        file_level_metadata_sylar_2fns_2fns_5fprotobuf_2eproto,
        7,
        file_level_enum_descriptors_sylar_2fns_2fns_5fprotobuf_2eproto,
        file_level_service_descriptors_sylar_2fns_2fns_5fprotobuf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sylar_2fns_2fns_5fprotobuf_2eproto =
    (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto)),
     true);
namespace sylar {
namespace ns {

// ===================================================================

void Node::InitAsDefaultInstance() {}
class Node::_Internal {
 public:
  using HasBits = decltype(std::declval<Node>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_port(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
  static void set_has_weight(HasBits* has_bits) { (*has_bits)[0] |= 4u; }
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sylar.ns.Node)
}
Node::Node(const Node& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ip_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            from._internal_ip(), GetArena());
  }
  ::memcpy(&port_, &from.port_,
           static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
                               reinterpret_cast<char*>(&port_)) +
               sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:sylar.ns.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Node_sylar_2fns_2fns_5fprotobuf_2eproto.base);
  ip_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0,
           static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
                               reinterpret_cast<char*>(&port_)) +
               sizeof(weight_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:sylar.ns.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast<Node*>(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void Node::SetCachedSize(int size) const { _cached_size_.Set(size); }
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_Node_sylar_2fns_2fns_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}

void Node::Clear() {
  // @@protoc_insertion_point(message_clear_start:sylar.ns.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&port_, 0,
             static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
                                 reinterpret_cast<char*>(&port_)) +
                 sizeof(weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str,
                                                        "sylar.ns.Node.ip");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sylar.ns.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_ip().data(),
        static_cast<int>(this->_internal_ip().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "sylar.ns.Node.ip");
    target = stream->WriteStringMaybeAliased(1, this->_internal_ip(), target);
  }

  // optional uint32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_port(), target);
  }

  // optional uint32 weight = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            3, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sylar.ns.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:sylar.ns.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                  this->_internal_ip());
    }

    // optional uint32 port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                  this->_internal_port());
    }

    // optional uint32 weight = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                  this->_internal_weight());
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:sylar.ns.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:sylar.ns.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:sylar.ns.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:sylar.ns.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:sylar.ns.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:sylar.ns.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const { return true; }

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_.Swap(&other->ip_,
           &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
           GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Node, weight_) + sizeof(Node::weight_) -
      PROTOBUF_FIELD_OFFSET(Node, port_)>(
      reinterpret_cast<char*>(&port_), reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RegisterInfo::InitAsDefaultInstance() {
  ::sylar::ns::_RegisterInfo_default_instance_._instance.get_mutable()->node_ =
      const_cast<::sylar::ns::Node*>(
          ::sylar::ns::Node::internal_default_instance());
}
class RegisterInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterInfo>()._has_bits_);
  static void set_has_domain(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static const ::sylar::ns::Node& node(const RegisterInfo* msg);
  static void set_has_node(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

const ::sylar::ns::Node& RegisterInfo::_Internal::node(
    const RegisterInfo* msg) {
  return *msg->node_;
}
RegisterInfo::RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), cmds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sylar.ns.RegisterInfo)
}
RegisterInfo::RegisterInfo(const RegisterInfo& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cmds_(from.cmds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  domain_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_domain()) {
    domain_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_domain(), GetArena());
  }
  if (from._internal_has_node()) {
    node_ = new ::sylar::ns::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sylar.ns.RegisterInfo)
}

void RegisterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RegisterInfo_sylar_2fns_2fns_5fprotobuf_2eproto.base);
  domain_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_ = nullptr;
}

RegisterInfo::~RegisterInfo() {
  // @@protoc_insertion_point(destructor:sylar.ns.RegisterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  domain_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete node_;
}

void RegisterInfo::ArenaDtor(void* object) {
  RegisterInfo* _this = reinterpret_cast<RegisterInfo*>(object);
  (void)_this;
}
void RegisterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void RegisterInfo::SetCachedSize(int size) const { _cached_size_.Set(size); }
const RegisterInfo& RegisterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RegisterInfo_sylar_2fns_2fns_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}

void RegisterInfo::Clear() {
  // @@protoc_insertion_point(message_clear_start:sylar.ns.RegisterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cmds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(node_ != nullptr);
      node_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterInfo::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "sylar.ns.RegisterInfo.domain");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 cmds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cmds(
                ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(
              _internal_mutable_cmds(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sylar.ns.Node node = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sylar.ns.RegisterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string domain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_domain().data(),
        static_cast<int>(this->_internal_domain().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "sylar.ns.RegisterInfo.domain");
    target =
        stream->WriteStringMaybeAliased(1, this->_internal_domain(), target);
  }

  // repeated uint32 cmds = 2;
  for (int i = 0, n = this->_internal_cmds_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_cmds(i), target);
  }

  // optional .sylar.ns.Node node = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            3, _Internal::node(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sylar.ns.RegisterInfo)
  return target;
}

size_t RegisterInfo::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:sylar.ns.RegisterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated uint32 cmds = 2;
  {
    size_t data_size =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
            this->cmds_);
    total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(
                          this->_internal_cmds_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string domain = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                  this->_internal_domain());
    }

    // optional .sylar.ns.Node node = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                  *node_);
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:sylar.ns.RegisterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterInfo>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:sylar.ns.RegisterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:sylar.ns.RegisterInfo)
    MergeFrom(*source);
  }
}

void RegisterInfo::MergeFrom(const RegisterInfo& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:sylar.ns.RegisterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cmds_.MergeFrom(from.cmds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_node()->::sylar::ns::Node::MergeFrom(
          from._internal_node());
    }
  }
}

void RegisterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:sylar.ns.RegisterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterInfo::CopyFrom(const RegisterInfo& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:sylar.ns.RegisterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterInfo::IsInitialized() const { return true; }

void RegisterInfo::InternalSwap(RegisterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cmds_.InternalSwap(&other->cmds_);
  domain_.Swap(
      &other->domain_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  swap(node_, other->node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterInfo::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RegisterRequest::InitAsDefaultInstance() {}
class RegisterRequest::_Internal {
 public:
};

RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sylar.ns.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sylar.ns.RegisterRequest)
}

void RegisterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RegisterRequest_sylar_2fns_2fns_5fprotobuf_2eproto.base);
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:sylar.ns.RegisterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterRequest::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void RegisterRequest::ArenaDtor(void* object) {
  RegisterRequest* _this = reinterpret_cast<RegisterRequest*>(object);
  (void)_this;
}
void RegisterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void RegisterRequest::SetCachedSize(int size) const { _cached_size_.Set(size); }
const RegisterRequest& RegisterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RegisterRequest_sylar_2fns_2fns_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}

void RegisterRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:sylar.ns.RegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sylar.ns.RegisterInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sylar.ns.RegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .sylar.ns.RegisterInfo infos = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->_internal_infos_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sylar.ns.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:sylar.ns.RegisterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .sylar.ns.RegisterInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:sylar.ns.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterRequest>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:sylar.ns.RegisterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:sylar.ns.RegisterRequest)
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:sylar.ns.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void RegisterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:sylar.ns.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:sylar.ns.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const { return true; }

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void QueryRequest::InitAsDefaultInstance() {}
class QueryRequest::_Internal {
 public:
};

QueryRequest::QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), domains_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sylar.ns.QueryRequest)
}
QueryRequest::QueryRequest(const QueryRequest& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), domains_(from.domains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sylar.ns.QueryRequest)
}

void QueryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_QueryRequest_sylar_2fns_2fns_5fprotobuf_2eproto.base);
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:sylar.ns.QueryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryRequest::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void QueryRequest::ArenaDtor(void* object) {
  QueryRequest* _this = reinterpret_cast<QueryRequest*>(object);
  (void)_this;
}
void QueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void QueryRequest::SetCachedSize(int size) const { _cached_size_.Set(size); }
const QueryRequest& QueryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_QueryRequest_sylar_2fns_2fns_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}

void QueryRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:sylar.ns.QueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  domains_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRequest::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string domains = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_domains();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
                str, ptr, ctx);
#ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
                str, "sylar.ns.QueryRequest.domains");
#endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sylar.ns.QueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string domains = 1;
  for (int i = 0, n = this->_internal_domains_size(); i < n; i++) {
    const auto& s = this->_internal_domains(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        s.data(), static_cast<int>(s.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "sylar.ns.QueryRequest.domains");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sylar.ns.QueryRequest)
  return target;
}

size_t QueryRequest::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:sylar.ns.QueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated string domains = 1;
  total_size +=
      1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(domains_.size());
  for (int i = 0, n = domains_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        domains_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:sylar.ns.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRequest>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:sylar.ns.QueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:sylar.ns.QueryRequest)
    MergeFrom(*source);
  }
}

void QueryRequest::MergeFrom(const QueryRequest& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:sylar.ns.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  domains_.MergeFrom(from.domains_);
}

void QueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:sylar.ns.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:sylar.ns.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const { return true; }

void QueryRequest::InternalSwap(QueryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  domains_.InternalSwap(&other->domains_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void NodeInfo::InitAsDefaultInstance() {}
class NodeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<NodeInfo>()._has_bits_);
  static void set_has_domain(HasBits* has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_cmd(HasBits* has_bits) { (*has_bits)[0] |= 2u; }
};

NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sylar.ns.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  domain_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_domain()) {
    domain_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_domain(), GetArena());
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:sylar.ns.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_NodeInfo_sylar_2fns_2fns_5fprotobuf_2eproto.base);
  domain_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_ = 0u;
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:sylar.ns.NodeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  domain_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo::ArenaDtor(void* object) {
  NodeInfo* _this = reinterpret_cast<NodeInfo*>(object);
  (void)_this;
}
void NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void NodeInfo::SetCachedSize(int size) const { _cached_size_.Set(size); }
const NodeInfo& NodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_NodeInfo_sylar_2fns_2fns_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}

void NodeInfo::Clear() {
  // @@protoc_insertion_point(message_clear_start:sylar.ns.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    domain_.ClearNonDefaultToEmpty();
  }
  cmd_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
              str, ptr, ctx);
#ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
              str, "sylar.ns.NodeInfo.domain");
#endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cmd(&has_bits);
          cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sylar.ns.Node nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sylar.ns.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string domain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_domain().data(),
        static_cast<int>(this->_internal_domain().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "sylar.ns.NodeInfo.domain");
    target =
        stream->WriteStringMaybeAliased(1, this->_internal_domain(), target);
  }

  // optional uint32 cmd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(
            2, this->_internal_cmd(), target);
  }

  // repeated .sylar.ns.Node nodes = 3;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->_internal_nodes_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            3, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sylar.ns.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:sylar.ns.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .sylar.ns.Node nodes = 3;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string domain = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                  this->_internal_domain());
    }

    // optional uint32 cmd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
                  this->_internal_cmd());
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:sylar.ns.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:sylar.ns.NodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:sylar.ns.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:sylar.ns.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:sylar.ns.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:sylar.ns.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const { return true; }

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nodes_.InternalSwap(&other->nodes_);
  domain_.Swap(
      &other->domain_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void QueryResponse::InitAsDefaultInstance() {}
class QueryResponse::_Internal {
 public:
};

QueryResponse::QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sylar.ns.QueryResponse)
}
QueryResponse::QueryResponse(const QueryResponse& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sylar.ns.QueryResponse)
}

void QueryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_QueryResponse_sylar_2fns_2fns_5fprotobuf_2eproto.base);
}

QueryResponse::~QueryResponse() {
  // @@protoc_insertion_point(destructor:sylar.ns.QueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryResponse::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void QueryResponse::ArenaDtor(void* object) {
  QueryResponse* _this = reinterpret_cast<QueryResponse*>(object);
  (void)_this;
}
void QueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void QueryResponse::SetCachedSize(int size) const { _cached_size_.Set(size); }
const QueryResponse& QueryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_QueryResponse_sylar_2fns_2fns_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}

void QueryResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:sylar.ns.QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResponse::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sylar.ns.NodeInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sylar.ns.QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .sylar.ns.NodeInfo infos = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->_internal_infos_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sylar.ns.QueryResponse)
  return target;
}

size_t QueryResponse::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:sylar.ns.QueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .sylar.ns.NodeInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:sylar.ns.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponse>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:sylar.ns.QueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:sylar.ns.QueryResponse)
    MergeFrom(*source);
  }
}

void QueryResponse::MergeFrom(const QueryResponse& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:sylar.ns.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void QueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:sylar.ns.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponse::CopyFrom(const QueryResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:sylar.ns.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponse::IsInitialized() const { return true; }

void QueryResponse::InternalSwap(QueryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponse::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void NotifyMessage::InitAsDefaultInstance() {}
class NotifyMessage::_Internal {
 public:
};

NotifyMessage::NotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), dels_(arena), updates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sylar.ns.NotifyMessage)
}
NotifyMessage::NotifyMessage(const NotifyMessage& from)
    : ::PROTOBUF_NAMESPACE_ID::Message(),
      dels_(from.dels_),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sylar.ns.NotifyMessage)
}

void NotifyMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_NotifyMessage_sylar_2fns_2fns_5fprotobuf_2eproto.base);
}

NotifyMessage::~NotifyMessage() {
  // @@protoc_insertion_point(destructor:sylar.ns.NotifyMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotifyMessage::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void NotifyMessage::ArenaDtor(void* object) {
  NotifyMessage* _this = reinterpret_cast<NotifyMessage*>(object);
  (void)_this;
}
void NotifyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {}
void NotifyMessage::SetCachedSize(int size) const { _cached_size_.Set(size); }
const NotifyMessage& NotifyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_NotifyMessage_sylar_2fns_2fns_5fprotobuf_2eproto.base);
  return *internal_default_instance();
}

void NotifyMessage::Clear() {
  // @@protoc_insertion_point(message_clear_start:sylar.ns.NotifyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  dels_.Clear();
  updates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyMessage::_InternalParse(
    const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) \
  if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sylar.ns.NodeInfo dels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sylar.ns.NodeInfo updates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<
                                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }    // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotifyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sylar.ns.NotifyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .sylar.ns.NodeInfo dels = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->_internal_dels_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, this->_internal_dels(i), target, stream);
  }

  // repeated .sylar.ns.NodeInfo updates = 2;
  for (unsigned int i = 0, n = static_cast<unsigned int>(
                               this->_internal_updates_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sylar.ns.NotifyMessage)
  return target;
}

size_t NotifyMessage::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:sylar.ns.NotifyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .sylar.ns.NodeInfo dels = 1;
  total_size += 1UL * this->_internal_dels_size();
  for (const auto& msg : this->dels_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sylar.ns.NodeInfo updates = 2;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotifyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_merge_from_start:sylar.ns.NotifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotifyMessage>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:sylar.ns.NotifyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:sylar.ns.NotifyMessage)
    MergeFrom(*source);
  }
}

void NotifyMessage::MergeFrom(const NotifyMessage& from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:sylar.ns.NotifyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  dels_.MergeFrom(from.dels_);
  updates_.MergeFrom(from.updates_);
}

void NotifyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  // @@protoc_insertion_point(generalized_copy_from_start:sylar.ns.NotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMessage::CopyFrom(const NotifyMessage& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:sylar.ns.NotifyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMessage::IsInitialized() const { return true; }

void NotifyMessage::InternalSwap(NotifyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  dels_.InternalSwap(&other->dels_);
  updates_.InternalSwap(&other->updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyMessage::GetMetadata() const {
  return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ns
}  // namespace sylar
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::sylar::ns::Node*
Arena::CreateMaybeMessage<::sylar::ns::Node>(Arena* arena) {
  return Arena::CreateMessageInternal<::sylar::ns::Node>(arena);
}
template <>
PROTOBUF_NOINLINE ::sylar::ns::RegisterInfo*
Arena::CreateMaybeMessage<::sylar::ns::RegisterInfo>(Arena* arena) {
  return Arena::CreateMessageInternal<::sylar::ns::RegisterInfo>(arena);
}
template <>
PROTOBUF_NOINLINE ::sylar::ns::RegisterRequest*
Arena::CreateMaybeMessage<::sylar::ns::RegisterRequest>(Arena* arena) {
  return Arena::CreateMessageInternal<::sylar::ns::RegisterRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::sylar::ns::QueryRequest*
Arena::CreateMaybeMessage<::sylar::ns::QueryRequest>(Arena* arena) {
  return Arena::CreateMessageInternal<::sylar::ns::QueryRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::sylar::ns::NodeInfo*
Arena::CreateMaybeMessage<::sylar::ns::NodeInfo>(Arena* arena) {
  return Arena::CreateMessageInternal<::sylar::ns::NodeInfo>(arena);
}
template <>
PROTOBUF_NOINLINE ::sylar::ns::QueryResponse*
Arena::CreateMaybeMessage<::sylar::ns::QueryResponse>(Arena* arena) {
  return Arena::CreateMessageInternal<::sylar::ns::QueryResponse>(arena);
}
template <>
PROTOBUF_NOINLINE ::sylar::ns::NotifyMessage*
Arena::CreateMaybeMessage<::sylar::ns::NotifyMessage>(Arena* arena) {
  return Arena::CreateMessageInternal<::sylar::ns::NotifyMessage>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
